//
//  ocxb.m
//  ocxb
//
//  Created by Rocco Bowling on 3/27/09.
//  Copyright 2009 Feline Entertainment. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <Cocoa/Cocoa.h>
#import "schema_object.h"
#import "schema.h"
#import "ObjC_Exporter.h"

NSString * gCodeFileExtension = @"m";

const char * executable_location = NULL;

NSMutableString * gcc_flags = NULL;

NSMutableDictionary * config;

void CreateFramework()
{
	NSString * header = [NSString stringWithFormat:@"// Autogenerated by ocxb on %@\\n// from schema %@\\n\\n", [[NSCalendarDate date] description], [[config objectForKey:@"file"] lastPathComponent]];
	NSString * product_name = [config objectForKey:@"framework"];
	NSString * build_dir = [NSString stringWithFormat:@"%@/%@", [config objectForKey:@"output"], [config objectForKey:@"prefix"]];
	NSString * prebuild_path = [NSString stringWithFormat:@"%@/%@.framework", build_dir, product_name];
	NSString * install_path = [NSString stringWithFormat:@"%@/%@.framework", [config objectForKey:@"output"], product_name];
	
	// yeah!  We want to create a framework, not just silly source code
	[[NSFileManager defaultManager] changeCurrentDirectoryPath:build_dir];

	
	if([config objectForKey:@"iphone"] == NULL)
	{
		/*
		system([[NSString stringWithFormat:@"rm -rf %@.framework", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"mkdir %@.framework", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"mkdir %@.framework/Versions", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"mkdir %@.framework/Versions/A", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"mkdir %@.framework/Versions/A/Headers", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"mkdir %@.framework/Versions/A/Resources", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"cp *.h %@.framework/Versions/A/Headers/", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"ls | awk 'BEGIN {printf(\"%@\")} /\\.h/ {printf(\"#import \\\"%@\\\"\\n\", $1)}' > %@.framework/Versions/A/Headers/%@.h", header, @"%s", product_name, product_name] UTF8String]);
		
		system([[NSString stringWithFormat:@"gcc -x objective-c -arch i386 -arch ppc %@ -framework Cocoa -framework Foundation -install_name @executable_path/%@.framework/Versions/A/%@ -dynamiclib -o %@.framework/Versions/A/%@ *.m", gcc_flags, product_name, product_name, product_name, product_name] UTF8String]);
		
		[[NSFileManager defaultManager] changeCurrentDirectoryPath:[NSString stringWithFormat:@"%@.framework/Versions/", product_name]];
		system([[NSString stringWithFormat:@"ln -sf A \"`pwd`/Current\""] UTF8String]);
		[[NSFileManager defaultManager] changeCurrentDirectoryPath:@"../"];
		system([[NSString stringWithFormat:@"ln -sf \"Versions/Current/%@\" \"`pwd`/%@\"", product_name, product_name] UTF8String]);
		system([[NSString stringWithFormat:@"ln -sf Versions/Current/Headers \"`pwd`/Headers\""] UTF8String]);
		system([[NSString stringWithFormat:@"ln -sf Versions/Current/Resources \"`pwd`/Resources\""] UTF8String]);
		 */
		
		
		system([[NSString stringWithFormat:@"rm -rf %@.iphone", product_name] UTF8String]);
		product_name = [config objectForKey:@"framework"];
		build_dir = [NSString stringWithFormat:@"%@/%@", [config objectForKey:@"output"], [config objectForKey:@"prefix"]];
		prebuild_path = [NSString stringWithFormat:@"%@/%@.iphone", build_dir, product_name];
		install_path = [NSString stringWithFormat:@"%@/%@.iphone", [config objectForKey:@"output"], product_name];
		
		system([[NSString stringWithFormat:@"mkdir %@.iphone", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"mkdir %@.iphone/Headers", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"cp *.h %@.iphone/Headers/", product_name] UTF8String]);
		system([[NSString stringWithFormat:@"ls | awk 'BEGIN {printf(\"%@\")} /\\.h/ {printf(\"#import \\\"%@\\\"\\n\", $1)}' > %@.iphone/Headers/%@.h", header, @"%s", product_name, product_name] UTF8String]);
		
		// Build the static library for simulator deployment
		{
			NSMutableString * linker_command = [NSMutableString stringWithFormat:@"/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/libtool -g  -static -arch_only i386 -framework Cocoa -framework Foundation -o %@.iphone/%@_Simulator.a ", product_name, product_name];
			
			for(NSString * file_name in [[NSFileManager defaultManager] contentsOfDirectoryAtPath:build_dir error:NULL])
			{
				if([file_name hasSuffix:gCodeFileExtension])
				{
					system([[NSString stringWithFormat:@"/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc-4.2 -g -x objective-c -arch i386 %@  -fvisibility=hidden -mmacosx-version-min=10.5 -c -o %@.o %@", gcc_flags, [file_name stringByDeletingPathExtension], file_name] UTF8String]);
					
					[linker_command appendFormat:@" %@.o", [file_name stringByDeletingPathExtension]];
				}
			}
			
			system([linker_command UTF8String]);
		}
	}
	else
	{
		if([config objectForKey:@"iphone"])
		{
			NSLog(@"%@", gcc_flags);
			
			system([[NSString stringWithFormat:@"rm -rf %@.iphone", product_name] UTF8String]);
			product_name = [config objectForKey:@"framework"];
			build_dir = [NSString stringWithFormat:@"%@/%@", [config objectForKey:@"output"], [config objectForKey:@"prefix"]];
			prebuild_path = [NSString stringWithFormat:@"%@/%@.iphone", build_dir, product_name];
			install_path = [NSString stringWithFormat:@"%@/%@.iphone", [config objectForKey:@"output"], product_name];
			
			system([[NSString stringWithFormat:@"mkdir %@.iphone", product_name] UTF8String]);
			system([[NSString stringWithFormat:@"mkdir %@.iphone/Headers", product_name] UTF8String]);
			system([[NSString stringWithFormat:@"cp *.h %@.iphone/Headers/", product_name] UTF8String]);
			system([[NSString stringWithFormat:@"ls | awk 'BEGIN {printf(\"%@\")} /\\.h/ {printf(\"#import \\\"%@\\\"\\n\", $1)}' > %@.iphone/Headers/%@.h", header, @"%s", product_name, product_name] UTF8String]);
			
			//system([[NSString stringWithFormat:@"/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc-4.2 -x objective-c -arch armv6 -arch armv7 -framework UIKit -framework Foundation -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.0.sdk -dynamiclib -o %@.iphone/%@ *.m", product_name, product_name, product_name, product_name] UTF8String]);
			
			// Build the static library for device deployment
			{
				NSMutableString * linker_command = [NSMutableString stringWithFormat:@"/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/libtool -static -arch_only armv6 -syslibroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.0.sdk -framework UIKit -framework Foundation -o %@.iphone/%@.a ", product_name, product_name];
				
				for(NSString * file_name in [[NSFileManager defaultManager] contentsOfDirectoryAtPath:build_dir error:NULL])
				{
					if([file_name hasSuffix:gCodeFileExtension])
					{
						system([[NSString stringWithFormat:@"/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc-4.2 -x objective-c -arch armv6 %@ -D__IPHONE_OS_VERSION_MIN_REQUIRED=30000 -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.0.sdk -fvisibility=hidden -mmacosx-version-min=10.5 -c -o %@.o %@", gcc_flags, [file_name stringByDeletingPathExtension], file_name] UTF8String]);
						
						[linker_command appendFormat:@" %@.o", [file_name stringByDeletingPathExtension]];
					}
				}
				
				system([linker_command UTF8String]);
			}
			
			// Build the static library for simulator deployment
			{
				NSMutableString * linker_command = [NSMutableString stringWithFormat:@"/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/libtool -static -arch_only i386 -syslibroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -framework UIKit -framework Foundation -o %@.iphone/%@_Simulator.a ", product_name, product_name];
				
				for(NSString * file_name in [[NSFileManager defaultManager] contentsOfDirectoryAtPath:build_dir error:NULL])
				{
					if([file_name hasSuffix:gCodeFileExtension])
					{
						system([[NSString stringWithFormat:@"/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc-4.2 -x objective-c -arch i386 %@ -D__IPHONE_OS_VERSION_MIN_REQUIRED=30000 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -fvisibility=hidden -mmacosx-version-min=10.5 -c -o %@.o %@", gcc_flags, [file_name stringByDeletingPathExtension], file_name] UTF8String]);
						
						[linker_command appendFormat:@" %@.o", [file_name stringByDeletingPathExtension]];
					}
				}
				
				system([linker_command UTF8String]);
			}
		}
	}
	
	[[NSFileManager defaultManager] changeCurrentDirectoryPath:build_dir];
	
	[[NSFileManager defaultManager] removeItemAtPath:install_path error:NULL];
	[[NSFileManager defaultManager] copyItemAtPath:prebuild_path toPath:install_path error:NULL];
	
	if([config objectForKey:@"clean"] != NULL)
	{
		[[NSFileManager defaultManager] removeItemAtPath:build_dir error:NULL];
	}
}

NSString * stringForXPath(NSXMLNode * node, NSString * path)
{
	NSArray * result = [node nodesForXPath:path error:NULL];
	
	if([result count] < 1)
	{
		return NULL;
	}
	
	return [[result objectAtIndex:0] stringValue];
}

int main (int argc, const char * argv[])
{
	int i;
	
	executable_location = argv[0];
	gcc_flags = [NSMutableString string];
	
	// Load all arguments into our configuration dictionary
	config = [NSMutableDictionary dictionary];
	for(i = 1; i < argc; i++)
	{
		NSString * line = [NSString stringWithUTF8String:argv[i]];
		
		NSString * key, * value;
		NSArray * parts = [line componentsSeparatedByString:@"="];
		
		key = [[parts objectAtIndex:0] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
		value = [[[parts subarrayWithRange:NSMakeRange(1, [parts count]-1)] componentsJoinedByString:@"="] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
		
		[config setObject:value forKey:key];
	}
	
	if([config objectForKey:@"file"] == NULL)
	{
		return 0;
	}
	
	if([config objectForKey:@"output"] == NULL)
	{
		[config setObject:@"/tmp/ocxb/" forKey:@"output"];
	}
	
	if([config objectForKey:@"fileType"] != NULL)
	{
		gCodeFileExtension = [config objectForKey:@"fileType"];
	}
	
	if([config objectForKey:@"file"])
	{
		NSString * file_path = [config objectForKey:@"file"];
		NSXMLDocument * document = [[NSXMLDocument alloc] initWithContentsOfURL:[NSURL fileURLWithPath:file_path]
																		options:NSXMLDocumentXInclude
																		  error:NULL];
		NSXMLNode * node = [document rootElement];
		unsigned int base_tree_level = [node level]-1;
		unsigned int current_tree_level = [node level]-1;
		NSTreeNode * current_tree_node = NULL;
		NSTreeNode * root_node = NULL;
		schema * root_schema;
		
		if(document == NULL)
		{
			NSLog(@"Error: unable to load file %@", file_path);
			exit(3);
		}
		
		NSString * targetNamespace = [stringForXPath(document, @"xs:schema/@targetNamespace") lastPathComponent];
		NSString * fullNamespace = stringForXPath(document, @"xs:schema/@targetNamespace");
		if(targetNamespace == NULL)
		{
			targetNamespace = [stringForXPath(document, @"schema/@targetNamespace") lastPathComponent];
			fullNamespace = stringForXPath(document, @"schema/@targetNamespace");
		}
		
		for(NSXMLNode * namespace_node in [(NSXMLElement *)node namespaces])
		{
			NSString * namespace = [namespace_node description];
			
			if([namespace rangeOfString:fullNamespace].length > 0)
			{
				NSArray * parts = [namespace componentsSeparatedByString:@"="];
				
				parts = [[parts objectAtIndex:0] componentsSeparatedByString:@":"];
				
				[config setObject:[parts objectAtIndex:[parts count]-1] forKey:@"currentNamespace"];
				
				break;
			}
		}
		
		NSMutableDictionary * namespace_mapping = [NSMutableDictionary dictionary];
		NSMutableDictionary * full_namespace_mapping = [NSMutableDictionary dictionary];
		for(NSXMLNode * namespace_node in [(NSXMLElement *)node namespaces])
		{
			NSString * namespace = [namespace_node description];
			
			NSArray * parts = [namespace componentsSeparatedByString:@"="];
			NSString * formalName, * shortName, * fullName;
			
			fullName = [[parts objectAtIndex:1] stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"\"'"]];
			formalName = [fullName lastPathComponent];
			
			parts = [[parts objectAtIndex:0] componentsSeparatedByString:@":"];
			
			shortName = [parts objectAtIndex:[parts count]-1];
			
			[full_namespace_mapping setObject:fullName forKey:shortName];
			[namespace_mapping setObject:formalName forKey:shortName];
		}
		
		[config setObject:full_namespace_mapping forKey:@"fullNamespaceMap"];
		[config setObject:namespace_mapping forKey:@"namespaceMap"];
		[config setObject:fullNamespace forKey:@"fullNamespace"];
		[config setObject:targetNamespace forKey:@"prefix"];
		[config setObject:targetNamespace forKey:@"framework"];
		
		base_tree_level = [node level]-1;
		current_tree_level = [node level]-1;
		do
		{
			while([node level] <= current_tree_level)
			{
				current_tree_level--;
				current_tree_node = [current_tree_node parentNode];
			}
			
			if(current_tree_level < base_tree_level)
			{
				break;
			}
			
			if ([node kind] == NSXMLElementKind)
			{
				NSString * class_name = [NSXMLNode localNameForName:[node name]];
				Class c = NSClassFromString(class_name);
				
				if(c)
				{
					schema_object * object = [(schema_object*)[c alloc] init];
					
					if([object isKindOfClass:[schema class]])
					{
						root_schema = (schema *)object;
					}
					
					if(current_tree_node != NULL)
					{
						NSTreeNode * next_node = [NSTreeNode treeNodeWithRepresentedObject:object];
						[object setNode:next_node];
						[[current_tree_node mutableChildNodes] addObject:next_node];
						current_tree_node = next_node;
						current_tree_level++;
					}
					else
					{
						root_node = current_tree_node = [NSTreeNode treeNodeWithRepresentedObject:object];
						[object setNode:current_tree_node];
						current_tree_level++;
					}
					
					// Capture all of the attributes
					for(NSXMLNode * attrib in [(NSXMLElement*)node attributes])
					{
						if ([attrib kind] == NSXMLAttributeKind)
						{
							[object set:[attrib stringValue]
									key:[attrib name]];
						}
					}
					
					// Capture any element contents
					if([node childCount] == 1 &&
					   [[node childAtIndex:0] kind] == NSXMLTextKind)
					{
						[object setContents:[node stringValue]];
					}
					
					if(root_schema)
					{
						[root_schema record:object];
					}
				}
			}
			
			node = [node nextNode];
						
		} while (node != NULL);
		
		
		if(root_node != NULL)
		{
			ObjC_Exporter * exporter = [[ObjC_Exporter alloc] init];
			
			[exporter setSchema_root:root_node];
			
			[exporter ExportToDirectory:[NSString stringWithFormat:@"%@/%@", [config objectForKey:@"output"], [config objectForKey:@"prefix"]]];
		}
		
		
		if([config objectForKey:@"framework"] && [config objectForKey:@"codeOnly"] == NULL)
		{
			CreateFramework();
		}
	}
	
    return 0;
}
